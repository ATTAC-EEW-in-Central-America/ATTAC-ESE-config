# List of plugins loaded at startup. Separate multiple names by comma. Add
# ${plugins} to consider all previously read values.
plugins = ${plugins}, fdsnxml, hypo71, dmvs, dmsm, locnll, saic

# Set the logging level between 1 and 4 where 1=ERROR, 2=WARNING, 3=INFO and
# 4=DEBUG.
logging.level = 4

# A regular expression of all clients that should handle a command message
# usually send to the GUI messaging group. Currently this flag is only used by
# GUI applications to set an artificial origin and to tell other clients to
# show this origin. To let all connected clients handle the command, ".*$" can
# be used.
commands.target = ".*$"

# Specified the location and the structure of the map tiles to be used. This
# path is composed of zero or more directives and must include at least one
# conversion specification which starts with is introduced by the character %
# followed by a conversion specifier. Valid specifiers are s (replaced by tile
# ID), l (tile level), c (tile column) and r (tile row). An example for using
# the OpenStreetMap file structure is /path/to/maps/%l/%c/%r.png.
map.location = @CONFIGDIR@/map/%l/%r/%c.jpg

# Projection of the map tiles. Supported formats are: rectangular and mercator.
map.format = mercator

# Show the events layer on maps. Currently only supported by scolv.
map.layers.events.visible = true

# The station symbol size (e.g. in scmv).
scheme.map.stationSize = 6

# SeisComP ships with the rectangular projection built-in. Other projections
# may be provided through plugins.
scheme.map.projection = Spherical

# The color of city labels.
scheme.colors.map.cityLabels = ffffffff

# The general color of records/traces.
scheme.colors.records.foreground = 4286F4

# A general trace color of the alternate trace (eg scheli).
scheme.colors.records.alternateForeground = B72D0E

# Setting this parameter to true will not interpolate between the depth steps
# and the color for a depth <= input is used.
scheme.colors.originSymbol.depth.discrete = false

# The precision of depth values.
scheme.precision.depth = 0

# The precision of distance values.
scheme.precision.distance = 1

# The precision of lat/lon values.
scheme.precision.location = 4

# The precision of magnitude values.
scheme.precision.magnitude = 2

# The precision of pick times.
scheme.precision.pickTime = 1

# Precision of RMS values.
scheme.precision.rms = 2

# Precision of uncertainty values, e.g. latitude errors.
scheme.precision.uncertainties = 2

# Display distances in km?
scheme.unit.distanceInKM = true

# Configures the default filters selectable in manual picker. The entry with a
# leading "@" is selected as default filter.
picker.filters = "@1-25 Hz; RMHP(80) >> ITAPER(10) >> BW(3,1,25)",\
                 "0.1-10 Hz; RMHP(80) >> ITAPER(10) >> BW(3,0.1,10)",\
                 "0.01-1 Hz; RMHP(80) >> ITAPER(10) >> BW(3,0.01,1)",\
                 "5-25 Hz; RMHP(80) >> ITAPER(10) >> BW(3,5,25)",\
                 "1-5 Hz;  RMHP(80) >> ITAPER(10) >> BW(3,1,5)",\
                 ".2-1 Hz; RMHP(80) >> ITAPER(10) >> BW(3,.2,1)",\
                 ".04-.2 Hz; RMHP(80) >> ITAPER(10) >> BW(3,.04,.2)",\
                 ".008-0.04 Hz; RMHP(160) >> ITAPER(10) >> BW(3,.008,.04)",\
                 "VSpick v1 {STA(.1)/LTA(80)[5-10 Hz]};RMHP (80) >> ITAPER (30) >> BW(4,5,10)>>STALTA(.2,80)",\
                 "VS(SM)pick v1 {STA(.2)/LTA(80)[5-10 Hz]};RMHP (80) >> ITAPER (30) >> BW(4,5,10)>>STALTA(.2,80)",\
                 "VSpick v0 {STA(1)/LTA(40)[2-1 Hz]};RMHP (80) >> ITAPER (30) >> BW(4,2,4)>>STALTA(1,40)",\
                 "VS(SM)pick v0 {STA(2)/LTA(40)[2-5 Hz]};RMHP (80) >> ITAPER (30) >> BW(4,2,5)>>STALTA(2,40)",\
                 ;

# Automatically starts computation of magnitudes after relocating an origin.
olv.computeMagnitudesAfterRelocate = false

# Starts magnitude computation without user interaction if everything runs
# without errors. In case of errors a window pops up with the current state of
# processing.
olv.computeMagnitudesSilently = false

# If enabled, a magnitude selection pop window will open in advance to compute
# magnitudes. The default selection reflects the configuration parameter
# "magnitudes".
olv.enableMagnitudeSelection = true

# The velocity applied to reduce travel times in the "MoveOut" plot of the
# Location tab.
olv.Pvel = 6

# Sets the drawing of lines in the map connecting the station with the event.
olv.drawMapLines = true

# Sets the drawing of grid lines in the plot.
olv.drawGridLines = true

# If a locator does not populate the take off angle in its arrivals, the first
# motion plot will not show picked polarities. This option defines whether to
# compute take off angles that are not present in the arrivals or not.
olv.computeMissingTakeOffAngles = true

# The default value for adding unassociated stations in the picker.
olv.defaultAddStationsDistance = 1

# If enabled, all traces without data and arrivals are hidden in the picker.
olv.hideStationsWithoutData = false

# If enabled, all traces of disabled stations without picks are hidden.
olv.hideDisabledStations = false

# Activate a cross hair cursor showing the configured uncertainties when in
# picking mode.
picker.showCrossHairCursor = false

# Load all existing picks for the requested data time window.
picker.loadAllPicks = true

# If enabled, the picker will not add stations that are not configured with a
# detecStream in global bindings.
picker.ignoreUnconfiguredStations = false

# Limit the data acquisition to the number of nearest stations given by
# "picker.limitStationAcquisitionCount".
picker.limitStationAcquisition = false

# Limit the data acquisituion to the given number of the nearest stations.
# Requires to activate "picker.limitStationAcquisition".
picker.limitStationAcquisitionCount = 10

# If enabled, acceleration data is loaded for co-located stations where picked
# on velocity data.
picker.loadStrongMotion = true

# Load all three components by default. If disabled, additional components are
# fetched upon request.
picker.loadAllComponents = true

# If enabled, all three components are shown in the picker zoom trace. The
# distance is limited to what is configured in
# "picker.allComponentsMaximumDistance".
picker.showAllComponents = true

# The distance limit for the "picker.showAllComponents" flag.
picker.allComponentsMaximumDistance = 10

# If enabled, data is requested around the P pick for each stations. Otherwise
# origin time is used and the time window for all stations is the same.
picker.usePerStreamTimeWindows = true

# After picking and pushing the solution back to scolv all automatic arrivals
# are removed from a station if a manual pick exists.
picker.removeAutomaticPicksFromStationAfterManualReview = false

# After picking and pushing the solution back to scolv all automatic arrivals
# are removed from all stations regardless if a manual pick exists or not.
picker.removeAllAutomaticPicksAfterManualReview = false

# The data time span added to the left of either origin time or first arrival
# depending on the usePerStreamTimeWindows flag.
picker.preOffset = 60

# The data time span added to the right of the requested time window.
picker.postOffset = 120

# Minimum data time window length.
picker.minimumTimeWindow = 1800

# Defines the relative position of the alignment when traces are aligned at a
# phase. This value is bound to interval [0:1] where 0 is the left side and 1
# is right side of the trace window.
picker.alignmentPosition = 0.5

# An optional pre-filter which is applied prior to the numerical integration to
# stabilize the result. This filter is applied for each integration step or
# just once depending on the parameter "applyOnce". Multiple integrations are
# necessary if acceleration data should be converted to displacement.
picker.integration.preFilter = ""

# Whether to apply the pre-filter only prior the first integration step or
# prior to each step.
picker.integration.applyOnce = true

# Time span in seconds to be added to the left of the used amplitude time
# window.
amplitudePicker.preOffset = 20

# Time span in seconds to be added to the right of the used amplitude time
# window.
amplitudePicker.postOffset = 120

# A list of filters used for the amplitude picker. Format:
# "name1;filter-definition1", "name2;filter-definition2"
amplitudePicker.filters = "hp 4p 2s (1.3<M<2.5);BW_HP(4,.5)", "hp 4p 2hz (M<1.3);BW_HP(4,2)"

# Maximum available/allowed tile level. The OpenStreetMap servers typically
# serve data up to level 19.
map.osm.maxLevel = 25
module.trunk.global.amplitudes.enable = true
module.trunk.global.amplitudes.enableResponses = true
olv.computeMagintudesSilently = true
olv.ignoreDisabledStations = true
picker.stripAutomaticPicks = true
